{"remainingRequest":"C:\\Users\\maxzh\\OneDrive\\桌面\\vue-antd-admin-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\maxzh\\OneDrive\\桌面\\vue-antd-admin-master\\src\\layouts\\tabs\\TabsView.vue?vue&type=style&index=0&id=012d64c5&scoped=true&lang=less&","dependencies":[{"path":"C:\\Users\\maxzh\\OneDrive\\桌面\\vue-antd-admin-master\\src\\layouts\\tabs\\TabsView.vue","mtime":1637637094000},{"path":"C:\\Users\\maxzh\\OneDrive\\桌面\\vue-antd-admin-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\maxzh\\OneDrive\\桌面\\vue-antd-admin-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\maxzh\\OneDrive\\桌面\\vue-antd-admin-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\maxzh\\OneDrive\\桌面\\vue-antd-admin-master\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\maxzh\\OneDrive\\桌面\\vue-antd-admin-master\\node_modules\\style-resources-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\maxzh\\OneDrive\\桌面\\vue-antd-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\maxzh\\OneDrive\\桌面\\vue-antd-admin-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50YWJzLXZpZXd7CiAgbWFyZ2luOiAtMTZweCBhdXRvIDhweDsKICAmLmhlYWQuZml4ZWR7CiAgICBtYXgtd2lkdGg6IDE0MDBweDsKICB9Cn0KLnRhYnMtdmlldy1jb250ZW50ewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAmLmhlYWQuZml4ZWR7CiAgICB3aWR0aDogMTQwMHB4OwogICAgbWFyZ2luOiAwIGF1dG87CiAgfQp9Cg=="},{"version":3,"sources":["TabsView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TabsView.vue","sourceRoot":"src/layouts/tabs","sourcesContent":["<template>\n  <admin-layout>\n    <contextmenu :itemList=\"menuItemList\" :visible.sync=\"menuVisible\" @select=\"onMenuSelect\" />\n    <tabs-head\n        v-if=\"multiPage\"\n        :active=\"activePage\"\n        :page-list=\"pageList\"\n        @change=\"changePage\"\n        @close=\"remove\"\n        @refresh=\"refresh\"\n        @contextmenu=\"onContextmenu\"\n    />\n    <div :class=\"['tabs-view-content', layout, pageWidth]\" :style=\"`margin-top: ${multiPage ? -24 : 0}px`\">\n      <page-toggle-transition :disabled=\"animate.disabled\" :animate=\"animate.name\" :direction=\"animate.direction\">\n        <a-keep-alive :exclude-keys=\"excludeKeys\" v-if=\"multiPage && cachePage\" v-model=\"clearCaches\">\n          <router-view v-if=\"!refreshing\" ref=\"tabContent\" :key=\"$route.path\" />\n        </a-keep-alive>\n        <router-view ref=\"tabContent\" v-else-if=\"!refreshing\" />\n      </page-toggle-transition>\n    </div>\n  </admin-layout>\n</template>\n\n<script>\nimport AdminLayout from '@/layouts/AdminLayout'\nimport Contextmenu from '@/components/menu/Contextmenu'\nimport PageToggleTransition from '@/components/transition/PageToggleTransition'\nimport {mapState, mapMutations} from 'vuex'\nimport {getI18nKey} from '@/utils/routerUtil'\nimport AKeepAlive from '@/components/cache/AKeepAlive'\nimport TabsHead from '@/layouts/tabs/TabsHead'\n\nexport default {\n  name: 'TabsView',\n  i18n: require('./i18n'),\n  components: {TabsHead, PageToggleTransition, Contextmenu, AdminLayout , AKeepAlive },\n  data () {\n    return {\n      clearCaches: [],\n      pageList: [],\n      activePage: '',\n      menuVisible: false,\n      refreshing: false,\n      excludeKeys: []\n    }\n  },\n  computed: {\n    ...mapState('setting', ['multiPage', 'cachePage', 'animate', 'layout', 'pageWidth']),\n    menuItemList() {\n      return [\n        { key: '1', icon: 'vertical-right', text: this.$t('closeLeft') },\n        { key: '2', icon: 'vertical-left', text: this.$t('closeRight') },\n        { key: '3', icon: 'close', text: this.$t('closeOthers') },\n        { key: '4', icon: 'sync', text: this.$t('refresh') },\n      ]\n    },\n    tabsOffset() {\n      return this.multiPage ? 24 : 0\n    }\n  },\n  created () {\n    this.loadCacheConfig(this.$router?.options?.routes)\n    this.loadCachedTabs()\n    const route = this.$route\n    if (this.pageList.findIndex(item => item.path === route.path) === -1) {\n      this.pageList.push(this.createPage(route))\n    }\n    this.activePage = route.path\n    if (this.multiPage) {\n      this.$nextTick(() => {\n        this.setCachedKey(route)\n      })\n      this.addListener()\n    }\n  },\n  mounted () {\n    this.correctPageMinHeight(-this.tabsOffset)\n  },\n  beforeDestroy() {\n    this.removeListener()\n    this.correctPageMinHeight(this.tabsOffset)\n  },\n  watch: {\n    '$router.options.routes': function (val) {\n      this.excludeKeys = []\n      this.loadCacheConfig(val)\n    },\n    '$route': function (newRoute) {\n      this.activePage = newRoute.path\n      const page = this.pageList.find(item => item.path === newRoute.path)\n      if (!this.multiPage) {\n        this.pageList = [this.createPage(newRoute)]\n      } else if (page) {\n        page.fullPath = newRoute.fullPath\n      } else if (!page) {\n        this.pageList.push(this.createPage(newRoute))\n      }\n      if (this.multiPage) {\n        this.$nextTick(() => {\n          this.setCachedKey(newRoute)\n        })\n      }\n    },\n    'multiPage': function (newVal) {\n      if (!newVal) {\n        this.pageList = [this.createPage(this.$route)]\n        this.removeListener()\n      } else {\n        this.addListener()\n      }\n    },\n    tabsOffset(newVal, oldVal) {\n      this.correctPageMinHeight(oldVal - newVal)\n    }\n  },\n  methods: {\n    changePage (key) {\n      this.activePage = key\n      const page = this.pageList.find(item => item.path === key)\n      this.$router.push(page.fullPath)\n    },\n    remove (key, next) {\n      if (this.pageList.length === 1) {\n        return this.$message.warning(this.$t('warn'))\n      }\n      //清除缓存\n      let index = this.pageList.findIndex(item => item.path === key)\n      this.clearCaches = this.pageList.splice(index, 1).map(page => page.cachedKey)\n      if (next) {\n        this.$router.push(next)\n      } else if (key === this.activePage) {\n        index = index >= this.pageList.length ? this.pageList.length - 1 : index\n        this.activePage = this.pageList[index].path\n        this.$router.push(this.activePage)\n      }\n    },\n    refresh (key, page) {\n      page = page || this.pageList.find(item => item.path === key)\n      page.loading = true\n      this.clearCache(page)\n      if (key === this.activePage) {\n        this.reloadContent(() => page.loading = false)\n      } else {\n        // 其实刷新很快，加这个延迟纯粹为了 loading 状态多展示一会儿，让用户感知刷新这一过程\n        setTimeout(() => page.loading = false, 500)\n      }\n    },\n    onContextmenu(pageKey, e) {\n      if (pageKey) {\n        e.preventDefault()\n        e.meta = pageKey\n        this.menuVisible = true\n      }\n    },\n    onMenuSelect (key, target, pageKey) {\n      switch (key) {\n        case '1': this.closeLeft(pageKey); break\n        case '2': this.closeRight(pageKey); break\n        case '3': this.closeOthers(pageKey); break\n        case '4': this.refresh(pageKey); break\n        default: break\n      }\n    },\n    closeOthers (pageKey) {\n      // 清除缓存\n      const clearPages = this.pageList.filter(item => item.path !== pageKey && !item.unclose)\n      this.clearCaches = clearPages.map(item => item.cachedKey)\n      this.pageList = this.pageList.filter(item => !clearPages.includes(item))\n      // 判断跳转\n      if (this.activePage != pageKey) {\n        this.activePage = pageKey\n        this.$router.push(this.activePage)\n      }\n    },\n    closeLeft (pageKey) {\n      const index = this.pageList.findIndex(item => item.path === pageKey)\n      // 清除缓存\n      const clearPages = this.pageList.filter((item, i) => i < index && !item.unclose)\n      this.clearCaches = clearPages.map(item => item.cachedKey)\n      this.pageList = this.pageList.filter(item => !clearPages.includes(item))\n      // 判断跳转\n      if (!this.pageList.find(item => item.path === this.activePage)) {\n        this.activePage = pageKey\n        this.$router.push(this.activePage)\n      }\n    },\n    closeRight (pageKey) {\n      // 清除缓存\n      const index = this.pageList.findIndex(item => item.path === pageKey)\n      const clearPages = this.pageList.filter((item, i) => i > index && !item.unclose)\n      this.clearCaches = clearPages.map(item => item.cachedKey)\n      this.pageList = this.pageList.filter(item => !clearPages.includes(item))\n      // 判断跳转\n      if (!this.pageList.find(item => item.path === this.activePage)) {\n        this.activePage = pageKey\n        this.$router.push(this.activePage)\n      }\n    },\n    clearCache(page) {\n      page._init_ = false\n      this.clearCaches = [page.cachedKey]\n    },\n    reloadContent(onLoaded) {\n      this.refreshing = true\n      setTimeout(() => {\n        this.refreshing = false\n        this.$nextTick(() => {\n          this.setCachedKey(this.$route)\n          if (typeof onLoaded === 'function') {\n            onLoaded.apply(this, [])\n          }\n        })\n      }, 200)\n    },\n    pageName(page) {\n      return this.$t(getI18nKey(page.keyPath))\n    },\n    /**\n     * 添加监听器\n     */\n    addListener() {\n      window.addEventListener('page:close', this.closePageListener)\n      window.addEventListener('page:refresh', this.refreshPageListener)\n      window.addEventListener('unload', this.unloadListener)\n    },\n    /**\n     * 移出监听器\n     */\n    removeListener() {\n      window.removeEventListener('page:close', this.closePageListener)\n      window.removeEventListener('page:refresh', this.refreshPageListener)\n      window.removeEventListener('unload', this.unloadListener)\n    },\n    /**\n     * 页签关闭事件监听\n     * @param event 页签关闭事件\n     */\n    closePageListener(event) {\n      const {closeRoute, nextRoute} = event.detail\n      const closePath = typeof closeRoute === 'string' ? closeRoute : closeRoute.path\n      const path = closePath && closePath.split('?')[0]\n      this.remove(path, nextRoute)\n    },\n    /**\n     * 页面刷新事件监听\n     * @param event 页签关闭事件\n     */\n    refreshPageListener(event) {\n      const {pageKey} = event.detail\n      const path = pageKey && pageKey.split('?')[0]\n      this.refresh(path)\n    },\n    /**\n     * 页面 unload 事件监听器，添加页签到 session 缓存，用于刷新时保留页签\n     */\n    unloadListener() {\n      const tabs = this.pageList.map(item => ({...item, _init_: false}))\n      sessionStorage.setItem(process.env.VUE_APP_TBAS_KEY, JSON.stringify(tabs))\n    },\n    createPage(route) {\n      return {\n        keyPath: route.matched[route.matched.length - 1].path,\n        fullPath: route.fullPath, loading: false,\n        path: route.path,\n        title: route.meta && route.meta.page && route.meta.page.title,\n        unclose: route.meta && route.meta.page && (route.meta.page.closable === false),\n      }\n    },\n    /**\n     * 设置页面缓存的key\n     * @param route 页面对应的路由\n     */\n    setCachedKey(route) {\n      const page = this.pageList.find(item => item.path === route.path)\n      page.unclose = route.meta && route.meta.page && (route.meta.page.closable === false)\n      if (!page._init_) {\n        const vnode = this.$refs.tabContent.$vnode\n        page.cachedKey = vnode.key + vnode.componentOptions.Ctor.cid\n        page._init_ = true\n      }\n    },\n    /**\n     * 加载缓存的 tabs\n     */\n    loadCachedTabs() {\n      const cachedTabsStr = sessionStorage.getItem(process.env.VUE_APP_TBAS_KEY)\n      if (cachedTabsStr) {\n        try {\n          const cachedTabs = JSON.parse(cachedTabsStr)\n          if (cachedTabs.length > 0) {\n            this.pageList = cachedTabs\n          }\n        } catch (e) {\n          console.warn('failed to load cached tabs, got exception:', e)\n        } finally {\n          sessionStorage.removeItem(process.env.VUE_APP_TBAS_KEY)\n        }\n      }\n    },\n    loadCacheConfig(routes, pCache = true) {\n      routes.forEach(item => {\n        const cacheAble = item.meta?.page?.cacheAble ?? pCache ?? true\n        if (!cacheAble) {\n          this.excludeKeys.push(new RegExp(`${item.path}\\\\d+$`))\n        }\n        if (item.children) {\n          this.loadCacheConfig(item.children, cacheAble)\n        }\n      })\n    },\n    ...mapMutations('setting', ['correctPageMinHeight'])\n  }\n}\n</script>\n\n<style scoped lang=\"less\">\n  .tabs-view{\n    margin: -16px auto 8px;\n    &.head.fixed{\n      max-width: 1400px;\n    }\n  }\n  .tabs-view-content{\n    position: relative;\n    &.head.fixed{\n      width: 1400px;\n      margin: 0 auto;\n    }\n  }\n</style>\n"]}]}